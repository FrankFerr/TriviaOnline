// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;

namespace TriviaRepository.Context.TriviaModel;

public partial class TriviaContext : DbContext
{
    public TriviaContext(DbContextOptions<TriviaContext> options) : base(options)
    {
    }

    public virtual DbSet<Categorie> Categorie { get; set; }

    public virtual DbSet<Domande> Domande { get; set; }

    public virtual DbSet<DomandeRisposte> DomandeRisposte { get; set; }

    public virtual DbSet<Partite> Partite { get; set; }

    public virtual DbSet<PartiteDomande> PartiteDomande { get; set; }

    public virtual DbSet<PartiteUtenti> PartiteUtenti { get; set; }

    public virtual DbSet<PartiteUtentiRisposte> PartiteUtentiRisposte { get; set; }

    public virtual DbSet<StoricoPartite> StoricoPartite { get; set; }

    public virtual DbSet<StoricoPartiteUtenti> StoricoPartiteUtenti { get; set; }

    public virtual DbSet<StoricoPartiteUtentiDom> StoricoPartiteUtentiDom { get; set; }

    public virtual DbSet<Utenti> Utenti { get; set; }

    protected override void OnModelCreating(ModelBuilder modelBuilder)
    {
        modelBuilder
            .HasDefaultSchema("TRIVIAONLINETEST")
            .UseCollation("USING_NLS_COMP");

        modelBuilder.Entity<Categorie>(entity =>
        {
            entity.Property(e => e.Oid).ValueGeneratedOnAdd();
            entity.Property(e => e.FlAttiva)
                .HasDefaultValueSql("'S' ")
                .IsFixedLength();
        });

        modelBuilder.Entity<Domande>(entity =>
        {
            entity.Property(e => e.Oid).ValueGeneratedOnAdd();
            entity.Property(e => e.FlAttiva)
                .HasDefaultValueSql("'S' ")
                .IsFixedLength();
            entity.Property(e => e.TpDifficolta)
                .HasDefaultValueSql("'F' ")
                .IsFixedLength();

            entity.HasOne(d => d.OidCategoriaNavigation).WithMany(p => p.Domande).HasConstraintName("FK_CATEGORIA");
        });

        modelBuilder.Entity<DomandeRisposte>(entity =>
        {
            entity.Property(e => e.Oid).ValueGeneratedOnAdd();
            entity.Property(e => e.FlCorretta).IsFixedLength();

            entity.HasOne(d => d.OidDomandaNavigation).WithMany(p => p.DomandeRisposte).HasConstraintName("FK_DOMANDA");
        });

        modelBuilder.Entity<Partite>(entity =>
        {
            entity.Property(e => e.Oid).ValueGeneratedOnAdd();
            entity.Property(e => e.DtCreazione).HasDefaultValueSql("SYSDATE ");
            entity.Property(e => e.FlConclusa)
                .HasDefaultValueSql("'N' ")
                .IsFixedLength();
            entity.Property(e => e.FlIniziata)
                .HasDefaultValueSql("'N' ")
                .IsFixedLength();
            entity.Property(e => e.NmPartecipanti).HasDefaultValueSql("1 ");
            entity.Property(e => e.NmRisposte).HasDefaultValueSql("0 ");
            entity.Property(e => e.NmSecTimeoutRisposta).HasDefaultValueSql("30 ");
            entity.Property(e => e.TpPartita).IsFixedLength();
        });

        modelBuilder.Entity<PartiteDomande>(entity =>
        {
            entity.Property(e => e.Oid).ValueGeneratedOnAdd();
            entity.Property(e => e.FlProposta)
                .HasDefaultValueSql("'N' ")
                .IsFixedLength();

            entity.HasOne(d => d.OidDomandaNavigation).WithMany(p => p.PartiteDomande)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_DOMANDE");

            entity.HasOne(d => d.OidPartitaNavigation).WithMany(p => p.PartiteDomande).HasConstraintName("FK_PARTITA");
        });

        modelBuilder.Entity<PartiteUtenti>(entity =>
        {
            entity.Property(e => e.Oid).ValueGeneratedOnAdd();
            entity.Property(e => e.FlCreata).IsFixedLength();

            entity.HasOne(d => d.OidPartitaNavigation).WithMany(p => p.PartiteUtenti).HasConstraintName("FK_PU_PARTITA");

            entity.HasOne(d => d.OidUtenteNavigation).WithMany(p => p.PartiteUtenti)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_PU_UTENTI");
        });

        modelBuilder.Entity<PartiteUtentiRisposte>(entity =>
        {
            entity.Property(e => e.Oid).ValueGeneratedOnAdd();
            entity.Property(e => e.FlCorretta).IsFixedLength();

            entity.HasOne(d => d.OidDomandaNavigation).WithMany(p => p.PartiteUtentiRisposte)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_PUR_DOMANDA");

            entity.HasOne(d => d.OidPartitaUtenteNavigation).WithMany(p => p.PartiteUtentiRisposte).HasConstraintName("FK_PUR_PARTITA_UTENTE");

            entity.HasOne(d => d.OidRispostaNavigation).WithMany(p => p.PartiteUtentiRisposte)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_PUR_RISPOSTA");
        });

        modelBuilder.Entity<StoricoPartite>(entity =>
        {
            entity.Property(e => e.Oid).ValueGeneratedOnAdd();
            entity.Property(e => e.DtCreazione).HasDefaultValueSql("SYSDATE ");
            entity.Property(e => e.FlConclusa)
                .HasDefaultValueSql("'N' ")
                .IsFixedLength();
            entity.Property(e => e.FlIniziata)
                .HasDefaultValueSql("'N' ")
                .IsFixedLength();
            entity.Property(e => e.NmPartecipanti).HasDefaultValueSql("1 ");
            entity.Property(e => e.NmRisposte).HasDefaultValueSql("0 ");
            entity.Property(e => e.NmSecTimeoutRisposta).HasDefaultValueSql("30 ");
            entity.Property(e => e.TpPartita).IsFixedLength();
        });

        modelBuilder.Entity<StoricoPartiteUtenti>(entity =>
        {
            entity.Property(e => e.Oid).ValueGeneratedOnAdd();
            entity.Property(e => e.FlEsito).IsFixedLength();

            entity.HasOne(d => d.OidStoricoPartitaNavigation).WithMany(p => p.StoricoPartiteUtenti)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_SPU_STORICO_PARTITA");
        });

        modelBuilder.Entity<StoricoPartiteUtentiDom>(entity =>
        {
            entity.Property(e => e.Oid).ValueGeneratedOnAdd();
            entity.Property(e => e.FlCorretta).IsFixedLength();

            entity.HasOne(d => d.OidStoricoPartitaUtenteNavigation).WithMany(p => p.StoricoPartiteUtentiDom)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_SPUD_STORICO_PARTITA_UTENTE");
        });

        modelBuilder.Entity<Utenti>(entity =>
        {
            entity.Property(e => e.Oid).ValueGeneratedOnAdd();
            entity.Property(e => e.FlAttivo).HasDefaultValueSql("'S' ").IsFixedLength();
        });
        modelBuilder.HasSequence("SEQ_CATEGORIE");
        modelBuilder.HasSequence("SEQ_DOMANDE");
        modelBuilder.HasSequence("SEQ_DOMANDE_RISPOSTE");
        modelBuilder.HasSequence("SEQ_PARTITE");
        modelBuilder.HasSequence("SEQ_PARTITE_DOMANDE");
        modelBuilder.HasSequence("SEQ_PARTITE_UTENTI");
        modelBuilder.HasSequence("SEQ_PARTITE_UTENTI_RISPOSTE");
        modelBuilder.HasSequence("SEQ_STORICO_PARTITE");
        modelBuilder.HasSequence("SEQ_STORICO_PARTITE_UTENTI");
        modelBuilder.HasSequence("SEQ_STORICO_PARTITE_UTENTI_DOM");
        modelBuilder.HasSequence("SEQ_UTENTI");

        OnModelCreatingPartial(modelBuilder);
    }

    partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
}